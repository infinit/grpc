import drake
import drake.cmake
import drake.cxx

import os


with open(str(drake.path_source('../../../../elle/drake-utils.py')), 'r') as f:
  exec(f.read(), globals(), globals())

cxx_config = None
cxx_config_lib = None
protoc = None
protobuf_include = None
protobuf_lib = None
grpc_cpp_plugin = None
grpc_python_plugin = None
libgrpcxx = None
sources = None

def configure(
    cxx_toolkit,
    in_cxx_config,
    cmake_env = {}
):
  global cxx_config, cxx_config_lib, protoc, grpc_cpp_plugin, grpc_python_plugin, libgrpcxx, sources
  EXE = (cxx_toolkit.os == drake.os.windows) and '.exe' or ''
  protoc = drake.Node('third_party/protobuf/protoc' + EXE)
  global protobuf_include, protobuf_lib
  protobuf_lib = drake.cxx.StaticLib('third_party/protobuf/libprotobuf.a')
  protobuf_include = drake.path_root() / drake.path_source('third_party/protobuf/src')
  grpc_cpp_plugin = drake.path_build('grpc_cpp_plugin' + EXE, absolute = True)
  grpc_python_plugin = drake.path_build('grpc_python_plugin' + EXE, absolute = True)
  libgrpcxx = drake.path_build('libgrpc++.a', absolute = True)
  srcs = drake.nodes(
    'CMakeLists.txt',
    )
  sources = [protobuf_lib] + drake.nodes(
    drake.path_build('libgrpc++.a', absolute = True),
    drake.path_build('libgrpc.a', absolute = True),
    drake.path_build('libgpr.a', absolute = True),
    drake.path_build('third_party/boringssl/ssl/libssl.a', absolute = True),
    drake.path_build('third_party/boringssl/crypto/libcrypto.a', absolute = True),
    )
  dsts = drake.nodes(
     grpc_cpp_plugin,
     grpc_python_plugin) + [
     protoc
     ] + sources
  # do not build everything
  targets = [
    'grpc',
    'grpc++',
    'grpc_cpp_plugin',
    'grpc_python_plugin',
    ('third_party/protobuf', 'protoc') # (workdir, target)
  ]
  cmake_source = drake.path_source() / '..' / '..' / '..' / '..' / drake.Drake.current.prefix
  cmake = drake.cmake.CMakeBuilder(cxx_toolkit, srcs, dsts, cmake_env, targets = targets,
                                   path_to_cmake_source = cmake_source)
  cxx_config = drake.cxx.Config(in_cxx_config)
  cxx_config.define('_WIN32_WINNT=0x600')
  cxx_config.add_system_include_path(protobuf_include)
  cxx_config.add_system_include_path('include')

  cxx_config_lib = drake.cxx.Config(cxx_config)
  cxx_config_lib.ldflag('-L%s' % drake.path_build('third_party/zlib', absolute = True))
  cxx_config_lib.lib('z')
  cxx_config_lib.use_whole_archive()
  if cxx_toolkit.os is drake.os.windows:
    cxx_config_lib.lib('ws2_32')
    cxx_config_lib.lib('kernel32')

# Local Variables:
# mode: python
# End:
